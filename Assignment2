/**
	 * Write a Computer program to find the type of a person and print the type.
	 * Infant : If the age is less than 1 year Toddler : If the age is less than
	 * 3 and greater than 1 Pre Schooler : If the age is less than 5 and greater
	 * than 3 KG Girl : If the age is greater than 5 and less than 6 and the
	 * gender is female KG Boy : If the age is greater than 5 and less than 6
	 * and the gender is male
*/

 public class Person {

	 int age;
	 boolean gender;// false --> male, true --> female

	 Person(int age, boolean gender) {
	 this.age = age;
	 this.gender = gender;
		  }

	public void personType(Person person){

	 if (person.age<1){
	     System.out.print("Infant");
	 }
	 if (person.age>1 && person.age<3){
	     System.out.print("Toddler");
	 }
	 if (person.age>3 && person.age<5){
	     System.out.print("Pre Schooler");
	 if (person.age>5 && person.age<6 && person.gender == false){
	     System.out.print("KG Boy");
        if (person.age>5 && person.age<6 && person.gender == true){
	     System.out.print("KG Girl");
	 }
	}
	}

/**
  	 * Given an integer N as input, check the following: If N is odd, print
  	 * "Weird". If N is even and, in between the range of 2 and 5(inclusive),
  	 * print "Not Weird". If N is even and, in between the range of 6 and
  	 * 20(inclusive), print "Weird". If N is even and N>20, print "Not Weird".
*/

     public class Number {
  	   int n;

     public void weirdNumber(int n) {
       if(n%2 != 0){
      	    System.out.print("Weird");
      	 }
       if(n%2 == 0 && n>=2 && n<=5){
           System.out.print("Not Weird");
       }
       if(n%2 == 0 && n>=6 && n<=20){
           System.out.print("Weird");
       }
       if(n%2 == 0 && n>20){
           System.out.print("Not Weird");
       }
  	}

/**
    	 * Write a method to determine whether a number is prime
*/

  public class Prime {
  	int n;

  public void isPrime(int n) {
  	boolean i = false;
  	 
    if(n<=1){
  	    	 System.out.print("this number is not a prime");
                return;
                }
  	else if(n==2){
                System.out.print("this number is a prime");
                return;
                }    
    else if(n>2){
  	     for(int k=2;k<n;k++){
  	     if(n%k == 0){
  				i = false;
  				break;}

  	     else{
  				i=true;}
  			}


  	if (i == true){
  			System.out.print("this number is a prime");}

  	else{
  			System.out.print("this number is not a prime");}
  		}
  	}


/**
    	 * Find N fibonacci numbers Fibonacci Number: f(N) = f(N-1)+f(N-2).
    	 * Typically, f(0)=f(1)=1.
*/

  public int[] fibonacciNumber(int n) {

    if(n<o) return new int[0];
      int[] results = new int[n+1];
      for(int i=0;i<n+1;i++){
        if(i==0) results[i]=1;
        else if(i==1) results[i]=1;
        else results[i]=results[i-1]+results[i-2];
    }
    }


/**
	 * Write a function that takes a string as input and returns the string
	 * reversed. Given s = "hello", return "olleh".
*/

    public String reverseString(String s) {
        char[] c = s.toCharArray();
        int size = s.length();
        int start = 0;
        int end = size-1;

        while (start < end) {
        char temp =c[start];
        c[start] = c[end];
        c[end]= temp;
        start++;end--;
}
        return new String(c);
	}

/*
	 * Given an array of nums, write a function to find the largest two integer.
*/

  public int[] findTheLargestTwo(int[] nums) {
	int[] nums={5,3,12,6,17,4,9,15};


	if(nums.length()<=1){
      return nums;
            }

	int larNum = Integer.MIN_VALUE;
	int secLarNum = Integer.MIN_VALUE;
        
  for (int i=0; i< nums.length(); i++){
		if (nums[i] > larNum){
			secLarNum=larNum;
			larNum=nums[i];
			}
	  else if (nums[i]>secLarNum){
			secLarNum=nums[i];
				}
			}
		}

		int[] larTwoNum={larNum,secLarNum};
		return larTwoNum;
		}
		

/**
	 * Given an array nums, write a function to move all 0's to the end of it
	 * while maintaining the relative order of the non-zero elements. For
	 * example, given nums = [0, 1, 0, 3, 12], after calling your function, nums
	 * should be [1, 3, 12, 0, 0].
*/

public void moveZeroes(int[] nums) {

	
	int[] results = new int[nums.length];
	int index=0; 
	for(int i=0;i<nums.length;i++){
		if(nums[i]!=0){
		results[index]=nums[i];
		index++;
		}
	}
	while(index<nums.length){
		results[index]=0;
		index++;
	}
	nums=results;
	}
	
// Bonus
/**
	 * Given a non-negative integer n, repeatedly add all its digits until the
	 * result has only one digit. For example: Given n = 38, the process is
	 * like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.
*/

	public int addDigits(int n) {
		
	int sum = 0;

	while (n > 0) {
	  sum += n%10;
	   n = n/10;
	}
	if(sum>9)
		
		return addDigits(sum);
		
	else
		return sum;
	}
	
